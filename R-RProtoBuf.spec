#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
Name     : R-RProtoBuf
Version  : 0.4.13
Release  : 4
URL      : https://cran.r-project.org/src/contrib/RProtoBuf_0.4.13.tar.gz
Source0  : https://cran.r-project.org/src/contrib/RProtoBuf_0.4.13.tar.gz
Summary  : R Interface to the 'Protocol Buffers' 'API' (Version 2 or 3)
Group    : Development/Tools
License  : GPL-2.0+
Requires: R-RProtoBuf-lib = %{version}-%{release}
Requires: R-RUnit
Requires: R-markdown
BuildRequires : R-RCurl
BuildRequires : R-RUnit
BuildRequires : R-Rcpp
BuildRequires : R-bitops
BuildRequires : R-markdown
BuildRequires : buildreq-R
BuildRequires : protobuf-dev

%description
Quoting from http://en.wikipedia.org/wiki/Protocol_Buffers
Protocol Buffers is a serialization format with an interface
description language developed by Google. The original Google implementation
for C++, Java and Python is available under a free software, open source
license. Various other language implementations are either available or in
development.
.
The design goals for Protocol Buffers emphasized simplicity and
performance. In particular, it was designed to be faster than XML (no
reproducible comparisons are publicly available to confirm this,
however). Protocol Buffers is very similar to Facebookâs Thrift protocol,
except it does not include a concrete RPC stack to use for defined
services. Since Protocol Buffers was open sourced, a number of RPC stacks
have emerged to fill this gap.
.
Prior to the release as open source, Protocol Buffers had been widely used
at Google for storing and interchanging all kinds of structured
information. Protocol Buffers serve as a basis for a custom RPC system that
is used for practically all inter-machine communication at Google.[1]
.
Data structures and services are defined in the Proto Definition file
(.proto) which is then compiled with protoc. This compilation generates code
that matches the services. For example, example.proto will produce
example.pb.cc and example.pb.h which will define C++ classes for each
Message and Service example.proto defines.
.
Protocol Buffers allow serialization into any number of formats. In the
officially supported implementations there is a full Reflection interface
available, making it easy to serialize protos as XML and JSON.
.
Though the primary purpose of Protocol Buffers is to facilitate network
communication, its simplicity and speed make Protocol Buffers a great
replacement of data-centric C++ classes and structs.

%package lib
Summary: lib components for the R-RProtoBuf package.
Group: Libraries

%description lib
lib components for the R-RProtoBuf package.


%prep
%setup -q -c -n RProtoBuf

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C
export SOURCE_DATE_EPOCH=1552795841

%install
export SOURCE_DATE_EPOCH=1552795841
rm -rf %{buildroot}
export LANG=C
export CFLAGS="$CFLAGS -O3 -flto -fno-semantic-interposition "
export FCFLAGS="$CFLAGS -O3 -flto -fno-semantic-interposition "
export FFLAGS="$CFLAGS -O3 -flto -fno-semantic-interposition "
export CXXFLAGS="$CXXFLAGS -O3 -flto -fno-semantic-interposition "
export AR=gcc-ar
export RANLIB=gcc-ranlib
export LDFLAGS="$LDFLAGS  -Wl,-z -Wl,relro"
mkdir -p %{buildroot}/usr/lib64/R/library

mkdir -p ~/.R
mkdir -p ~/.stash
echo "CFLAGS = $CFLAGS -march=haswell -ftree-vectorize " > ~/.R/Makevars
echo "FFLAGS = $FFLAGS -march=haswell -ftree-vectorize " >> ~/.R/Makevars
echo "CXXFLAGS = $CXXFLAGS -march=haswell -ftree-vectorize " >> ~/.R/Makevars
R CMD INSTALL --install-tests --built-timestamp=${SOURCE_DATE_EPOCH} --build  -l %{buildroot}/usr/lib64/R/library RProtoBuf
for i in `find %{buildroot}/usr/lib64/R/ -name "*.so"`; do mv $i $i.avx2 ; mv $i.avx2 ~/.stash/; done
echo "CFLAGS = $CFLAGS -march=skylake-avx512 -ftree-vectorize " > ~/.R/Makevars
echo "FFLAGS = $FFLAGS -march=skylake-avx512 -ftree-vectorize " >> ~/.R/Makevars
echo "CXXFLAGS = $CXXFLAGS -march=skylake-avx512 -ftree-vectorize " >> ~/.R/Makevars
R CMD INSTALL --preclean --install-tests --no-test-load --built-timestamp=${SOURCE_DATE_EPOCH} --build  -l %{buildroot}/usr/lib64/R/library RProtoBuf
for i in `find %{buildroot}/usr/lib64/R/ -name "*.so"`; do mv $i $i.avx512 ; mv $i.avx512 ~/.stash/; done
echo "CFLAGS = $CFLAGS -ftree-vectorize " > ~/.R/Makevars
echo "FFLAGS = $FFLAGS -ftree-vectorize " >> ~/.R/Makevars
echo "CXXFLAGS = $CXXFLAGS -ftree-vectorize " >> ~/.R/Makevars
R CMD INSTALL --preclean --install-tests --built-timestamp=${SOURCE_DATE_EPOCH} --build  -l %{buildroot}/usr/lib64/R/library RProtoBuf
cp ~/.stash/* %{buildroot}/usr/lib64/R/library/*/libs/ || :
%{__rm} -rf %{buildroot}%{_datadir}/R/library/R.css
%check
export LANG=C
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export _R_CHECK_FORCE_SUGGESTS_=false
R CMD check --no-manual --no-examples --no-codoc  RProtoBuf || :


%files
%defattr(-,root,root,-)
/usr/lib64/R/library/RProtoBuf/CITATION
/usr/lib64/R/library/RProtoBuf/DESCRIPTION
/usr/lib64/R/library/RProtoBuf/INDEX
/usr/lib64/R/library/RProtoBuf/Meta/Rd.rds
/usr/lib64/R/library/RProtoBuf/Meta/demo.rds
/usr/lib64/R/library/RProtoBuf/Meta/features.rds
/usr/lib64/R/library/RProtoBuf/Meta/hsearch.rds
/usr/lib64/R/library/RProtoBuf/Meta/links.rds
/usr/lib64/R/library/RProtoBuf/Meta/nsInfo.rds
/usr/lib64/R/library/RProtoBuf/Meta/package.rds
/usr/lib64/R/library/RProtoBuf/Meta/vignette.rds
/usr/lib64/R/library/RProtoBuf/NAMESPACE
/usr/lib64/R/library/RProtoBuf/NEWS.Rd
/usr/lib64/R/library/RProtoBuf/R/RProtoBuf
/usr/lib64/R/library/RProtoBuf/R/RProtoBuf.rdb
/usr/lib64/R/library/RProtoBuf/R/RProtoBuf.rdx
/usr/lib64/R/library/RProtoBuf/THANKS
/usr/lib64/R/library/RProtoBuf/demo/addressbook.R
/usr/lib64/R/library/RProtoBuf/demo/io.R
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-intro.R
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-intro.Rmd
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-intro.pdf
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-paper.R
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-paper.Rnw
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-paper.pdf
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-quickref.R
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-quickref.Rmd
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-quickref.pdf
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-unitTests.R
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-unitTests.Rnw
/usr/lib64/R/library/RProtoBuf/doc/RProtoBuf-unitTests.pdf
/usr/lib64/R/library/RProtoBuf/doc/index.html
/usr/lib64/R/library/RProtoBuf/examples/addressbook.pb
/usr/lib64/R/library/RProtoBuf/help/AnIndex
/usr/lib64/R/library/RProtoBuf/help/RProtoBuf.rdb
/usr/lib64/R/library/RProtoBuf/help/RProtoBuf.rdx
/usr/lib64/R/library/RProtoBuf/help/aliases.rds
/usr/lib64/R/library/RProtoBuf/help/paths.rds
/usr/lib64/R/library/RProtoBuf/html/00Index.html
/usr/lib64/R/library/RProtoBuf/html/R.css
/usr/lib64/R/library/RProtoBuf/opencpu/ocpu-getdata.R
/usr/lib64/R/library/RProtoBuf/opencpu/ocpu-getdata.py
/usr/lib64/R/library/RProtoBuf/opencpu/ocpu-rpc.R
/usr/lib64/R/library/RProtoBuf/opencpu/ocpu-rpc.py
/usr/lib64/R/library/RProtoBuf/opencpu/readme.txt
/usr/lib64/R/library/RProtoBuf/opencpu/rexp_pb2.py
/usr/lib64/R/library/RProtoBuf/proto/addressbook.proto
/usr/lib64/R/library/RProtoBuf/proto/helloworld.proto
/usr/lib64/R/library/RProtoBuf/proto/rexp.proto
/usr/lib64/R/library/RProtoBuf/python/readmsg.py
/usr/lib64/R/library/RProtoBuf/python/runtest.sh
/usr/lib64/R/library/RProtoBuf/python/writemsg.R
/usr/lib64/R/library/RProtoBuf/tests/runUnitTests.R
/usr/lib64/R/library/RProtoBuf/unitTests/data/bytes.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/cyclical/proj1/proto/a.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/cyclical/proj1/proto/c.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/cyclical/proj2/proto/b.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/encoding.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/int64.ascii
/usr/lib64/R/library/RProtoBuf/unitTests/data/nested.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/proto3.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/recursive/subdir/subdir_message.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/subdir/subdir_message.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/unittest.proto
/usr/lib64/R/library/RProtoBuf/unitTests/data/unittest_import.proto
/usr/lib64/R/library/RProtoBuf/unitTests/runTests.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.FieldDescriptor.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.addressbook.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.bool.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.bytes.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.descriptors.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.enums.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.extensions.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.extremevalues.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.golden.message.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.import.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.int32.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.int64.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.messages.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.nested.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.proto3.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.serialize.R
/usr/lib64/R/library/RProtoBuf/unitTests/runit.serialize_pb.R

%files lib
%defattr(-,root,root,-)
/usr/lib64/R/library/RProtoBuf/libs/RProtoBuf.so
